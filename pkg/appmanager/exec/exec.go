package exec

import (
	"go.semut.io/sdk/go-sdk/pkg/common"
)

// JobSpec is the specification of the job
type JobSpec struct {
	// ID of the deployment
	DeploymentID string `json:"deployment_id"`
	// ID of the worker group
	WorkerGroupID string `json:"worker_group_id,omitempty"`
	// ID of the worker where the file exists
	WorkerID string `json:"worker_id,omitempty"`
}

// Job is a job specification along with ID
type Job struct {
	JobSpec
	// Unique ID of the job
	JobID string `json:"job_id,omitempty"`
}

// AsyncExecRequest Remote execution of script
type AsyncExecRequest struct {
	JobSpec
	// Full path of the executable
	Executeable string `json:"executable"`
	// Arguments to be passed to the executable
	Args []string `json:"args"`
	// Timeout in seconds
	Timeout int `json:"timeout"`
	common.AsyncRequest
}

// RunResult result of run identified by each worker
type RunResult struct {
	// WorkerID is the unique UUID of the Worker on which the script was being run.
	WorkerID string `json:"worker_id"`
	// Output generated by the script execution
	Stdout string `json:"stdout,omitempty"`
	// Errors generated by the script execution
	Stderr string `json:"stderr,omitempty"`
	// Whether the script was sucessfully executed on the given worker
	Success bool `json:"sucess,omitempty"`
	// ExitCode of the script execution.
	ExitCode int `json:"exit_code"`
	// Log generated by the script execution.
	Log string `json:"log"`
}

// AsyncExecResponse Run response
type AsyncExecResponse struct {
	common.AsyncResponse
	// Unique ID of the job
	JobID string `json:"job_id,omitempty"`
}

// AsyncExecCallback post exec callback response
type AsyncExecCallback struct {
	common.AsyncResponse
	// Result of execution of script for each worker_id
	JobID string `json:"job_id,omitempty"`
	// List of results from all workers
	Result []RunResult `json:"result,omitempty"`
}

// ExecRequest remote execution of script (sync request)
type ExecRequest struct {
	JobSpec
	// Full path of the executable
	Executeable string `json:"executable"`
	// Arguments to be passed to the executable
	Args []string `json:"args"`
}

// ExecResponse is the response to the exec request
type ExecResponse struct {
	common.APIResponse
	// Result from all workers
	Results []RunResult `json:"results,omitempty"`
}

// AsyncExecKillRequest request to stop running processes
type AsyncExecKillRequest struct {
	// ID of the job to kill
	JobID string `json:"job_id"`
	common.AsyncRequest
}

// AsyncExecKillResponse result of kill request
type AsyncExecKillResponse struct {
	common.AsyncResponse
}

// AsyncExecKillCallback response of Kill callback
type AsyncExecKillCallback struct {
	common.APIResponse
}

// AsyncExec executes a given executable on a given worker or all workers in a worker group or all workers in a deployment
func (asyncExecRequest *AsyncExecRequest) AsyncExec() (execJobID string, apiErr *common.Error) {

	asyncExecResponse := AsyncExecResponse{}
	err := common.Execute("ExecRun", asyncExecRequest, &asyncExecResponse)

	if err != nil {
		return "", &common.ErrInvalidResponseFromAPI
	}

	if asyncExecResponse.StatusCode != "200" {

		apiErr = &common.Error{
			ErrorCode:        asyncExecResponse.StatusCode,
			ErrorDescription: asyncExecResponse.Description,
		}

		return "", apiErr
	}

	return asyncExecResponse.JobID, nil
}

// Kill stops all async exec running processes
func (killRequest *AsyncExecKillRequest) KillAsyncExec() (requestID string, apiErr *common.Error) {

	killResponse := AsyncExecKillResponse{}
	err := common.Execute("ExecKill", killRequest, &killResponse)

	if err != nil {
		return "", err
	}

	if killResponse.StatusCode != "200" {

		apiErr = &common.Error{
			ErrorCode:        killResponse.StatusCode,
			ErrorDescription: killResponse.Description,
		}

		return "", apiErr
	}

	return killResponse.RequestToken, nil
}

// Exec a process
func (execRequest *ExecRequest) Exec() (results []RunResult, apiErr *common.Error) {
	execResponse := ExecResponse{}
	err := common.Execute("Exec", execRequest, &execResponse)

	if err != nil {
		return nil, err
	}

	if execResponse.StatusCode != "200" {

		apiErr = &common.Error{
			ErrorCode:        execResponse.StatusCode,
			ErrorDescription: execResponse.Description,
		}

		return nil, apiErr
	}

	return execResponse.Results, nil
}
